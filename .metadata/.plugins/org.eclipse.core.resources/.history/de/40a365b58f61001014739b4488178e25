
#include <stdint.h>
#include <stdio.h>
#include <sys/_intsup.h>
#include "esp_attr.h"
#include "esp_rom_gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/idf_additions.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_log.h"
#include "hal/gpio_types.h"
#include "led_strip.h"
#include "sdkconfig.h"
#include "freertos\queue.h"

#define BLINK_GPIO 2
#define BUTTON_GPIO 4

TaskHandle_t BlinkyTaskHandle = NULL;
QueueHandle_t myQueue = NULL;

bool led_state = false;
void Blinky_Task(void * arg)
{
	while(1)
	{	
		if(xQueueReceive(myQueue, &led_state, TickType_t portMAX_DELAY))
		{
			gpio_set_level(BLINK_GPIO, led_state);
		}
}
}

static void IRAM_ATTR gpio_isr_handler(void* arg)
{
        led_state = !led_state;
}

void app_main()
{
	esp_rom_gpio_pad_select_gpio(BLINK_GPIO);
	gpio_set_direction(BLINK_GPIO, GPIO_MODE_OUTPUT);
	
	esp_rom_gpio_pad_select_gpio(BUTTON_GPIO);
	gpio_set_direction(BUTTON_GPIO, GPIO_MODE_INPUT);
	
	gpio_pullup_en(BUTTON_GPIO);
	
	gpio_pulldown_dis(BUTTON_GPIO);
	
	// Raising edge signal will trigger interrupt
	gpio_set_intr_type(BUTTON_GPIO, GPIO_INTR_POSEDGE);
	
	//install gpio isr service to defaylt values
	gpio_install_isr_service(0);
	// Attach the isr to the gpio interrpupt
	gpio_isr_handler_add(BUTTON_GPIO, gpio_isr_handler, NULL);
	
	//Enable interrupt 
	gpio_intr_enable(BUTTON_GPIO);
	
	xTaskCreatePinnedToCore(Blinky_Task, "Blinky", 4096, NULL , 10, &BlinkyTaskHandle, 0);
	
}

